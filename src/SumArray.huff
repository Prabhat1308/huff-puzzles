
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 *  
 *  The task is to write within the `MAIN` macro below, write a functionality that takes an array of uint256 as an argument and returns the sum of all the numbers
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function sumArray(uint256[]) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    // first 4 bytes of calldata is the function signature
    // next 32 bytes is the offset of the array
    // next 32 bytes is the length of the array
    // then next 32 bytes intervals have the array elements
    0x00 calldataload
    0xE0
    shr

    __FUNC_SIG(sumArray) eq sumArray jumpi
    revert

    sumArray:

     0x00  // sum at first 32 bytes
     0x00
     mstore
     
     0x44  // offset at next 32 bytes
     0x20
     mstore

     0x24 calldataload
      start:
        dup1 0x00 eq end jumpi
        0x01 swap1 sub 
        0x20 mload
        calldataload
        0x00 mload 
        add
        0x00 mstore
        0x20 mload
        0x20 add
        0x20 mstore
        start jump
        revert
      end:
        0x20
        0x00
        return

}