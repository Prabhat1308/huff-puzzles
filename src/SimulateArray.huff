
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 * In this puzzle, the task is to simulate an array in Huff using the "exact" storage pattern as solidity. Expected functions can; 
 *      - Push numbers onto a array, 
 *      - Pop the last index from the array,
 *      - View what's stored at an index, 
 *      - Gets the length of the array, 
 *      - Write to an index if it is valid.
 *
 *      - Writes and reads outside of length revert. 
 *      - Popping off a zero length array reverts.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */
 
 #define function pushh(uint256 num) payable returns()
 #define function popp() payable returns()
 #define function read(uint256 index) payable returns(uint256)
 #define function length() payable returns(uint256)
 #define function write(uint256 index, uint256 num) payable returns()

 #define error OutOfBounds()
 #define error ZeroArray()
 
 #define constant SLOT0 = FREE_MEMORY_POINTER()

 #define macro MAIN() = takes(0) returns(0) {
    //0x00 for len of array
    0x00 calldataload
    0XE0 shr
    
    dup1 __FUNC_SIG(pushh) eq pushh jumpi
    dup1 __FUNC_SIG(popp) eq popp jumpi
    dup1 __FUNC_SIG(read) eq read jumpi
    dup1 __FUNC_SIG(length) eq length jumpi
    __FUNC_SIG(write) eq write jumpi

    revert

    pushh:
      


    popp:

    

    read:


    length:



    write:





 }