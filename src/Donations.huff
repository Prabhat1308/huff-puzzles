/** 
 *  DONATIONS HUFF EXERCISE
 *  
 *  The task is to Implement solidity's "receive" functionality which allows sending ether to a smart contract without any calldata
 *  also have a getter function that returns how much an address has donated. Addresses can donate several times
 */

#define function donated(address) payable returns(uint256)

// #define constant fs = FREE_STORAGE_POINTER()

// #define macro MAIN() = takes(0) returns(0) {
    
//     0x00 calldataload
//     0xe0 shr __FUNC_SIG(donated) eq donated jumpi
    
//     caller 0x00 mstore
//     [fs] 0x20 mstore
//     0x40 0x00 sha3 //hast gives the location of the values sent by the donor till now mapping
//     dup1 
//     sload callvalue add 
//     swap1 
//     sstore 
//     stop 
    
//     // related to how mappings are stored in evm . Re do this part
//     donated:

//     caller 0x00 mstore //[donor_addr]
//     [fs] 0x20 mstore
//     0x40 0x00 sha3
//     sload
//     swap1 pop
//     0x00 mstore
//     0x20 0x00 return

// }


#define constant SLOT0 = FREE_STORAGE_POINTER()

#define macro MAIN() = takes(0) returns(0) {
        0x00 calldataload
        0xe0 shr  // [func-sig]
        dup1 __FUNC_SIG(donated) eq donatedJump jumpi

   
        caller 0x00 mstore
        [SLOT0] 0x20 mstore
        0x40 0x00 sha3 //[hash-result, func-sig]
        dup1 //[hash-result, hash-result, func-sig]
        sload callvalue add //[add-result, hash-result, func-sig]
        swap1 //[add-result, hash-result, func-sig]
        sstore //[func-sig]
        /* pop */ stop //[]

    donatedJump:
        // callvalue 0x00
        caller 0x00 mstore
        [SLOT0] 0x20 mstore
        0x40 0x00 sha3 //[hash-result, func-sig]
        sload //[loaded-value, func-sig]
        swap1 pop //[loaded-value]
        0x00 mstore
        0x20 0x00 return

}